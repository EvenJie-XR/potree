export class Viewer extends EventDispatcher {
    constructor(domElement: any, args?: {});
    renderArea: any;
    guiLoaded: boolean;
    guiLoadTasks: any[];
    onVrListeners: any[];
    messages: any[];
    elMessages: any;
    pointCloudLoadedCallback: any;
    server: any;
    fov: number;
    isFlipYZ: boolean;
    useDEMCollisions: boolean;
    generateDEM: boolean;
    minNodeSize: number;
    edlStrength: number;
    edlRadius: number;
    edlOpacity: number;
    useEDL: boolean;
    description: string;
    classifications: {
        0: {
            visible: boolean;
            name: string;
            color: number[];
        };
        1: {
            visible: boolean;
            name: string;
            color: number[];
        };
        2: {
            visible: boolean;
            name: string;
            color: number[];
        };
        3: {
            visible: boolean;
            name: string;
            color: number[];
        };
        4: {
            visible: boolean;
            name: string;
            color: number[];
        };
        5: {
            visible: boolean;
            name: string;
            color: number[];
        };
        6: {
            visible: boolean;
            name: string;
            color: number[];
        };
        7: {
            visible: boolean;
            name: string;
            color: number[];
        };
        8: {
            visible: boolean;
            name: string;
            color: number[];
        };
        9: {
            visible: boolean;
            name: string;
            color: number[];
        };
        12: {
            visible: boolean;
            name: string;
            color: number[];
        };
        DEFAULT: {
            visible: boolean;
            name: string;
            color: number[];
        };
    };
    moveSpeed: number;
    lengthUnit: {
        code: string;
        unitspermeter: number;
    };
    lengthUnitDisplay: {
        code: string;
        unitspermeter: number;
    };
    showBoundingBox: boolean;
    showAnnotations: boolean;
    freeze: boolean;
    clipTask: number;
    clipMethod: number;
    elevationGradientRepeat: number;
    filterReturnNumberRange: number[];
    filterNumberOfReturnsRange: number[];
    filterGPSTimeRange: number[];
    filterPointSourceIDRange: number[];
    potreeRenderer: PotreeRenderer;
    edlRenderer: EDLRenderer;
    renderer: THREE.WebGLRenderer;
    pRenderer: Renderer;
    scene: any;
    sceneVR: THREE.Scene;
    overlay: THREE.Scene;
    overlayCamera: THREE.OrthographicCamera;
    inputHandler: InputHandler;
    controls: any;
    clippingTool: ClippingTool;
    transformationTool: TransformationTool;
    navigationCube: NavigationCube;
    compass: Compass;
    skybox: {
        camera: THREE.PerspectiveCamera;
        scene: THREE.Scene;
        parent: THREE.Object3D;
    };
    clock: THREE.Clock;
    background: any;
    stats: any;
    shadowTestCam: THREE.PerspectiveCamera;
    scaleFactor: number;
    loadGUI(callback: any): Promise<any>;
    annotationTool: AnnotationTool;
    measuringTool: MeasuringTool;
    profileTool: ProfileTool;
    volumeTool: VolumeTool;
    onCrash(error: any): void;
    setScene(scene: any): void;
    onAnnotationAdded: (e: any) => void;
    setControls(controls: any): void;
    getControls(): any;
    getMinNodeSize(): number;
    setMinNodeSize(value: any): void;
    getBackground(): any;
    setBackground(bg: any): void;
    setDescription(value: any): void;
    getDescription(): string;
    setShowBoundingBox(value: any): void;
    getShowBoundingBox(): boolean;
    setMoveSpeed(value: any): void;
    getMoveSpeed(): number;
    setWeightClassification(w: any): void;
    setFreeze(value: any): void;
    getFreeze(): boolean;
    getClipTask(): number;
    getClipMethod(): number;
    setClipTask(value: any): void;
    setClipMethod(value: any): void;
    setElevationGradientRepeat(value: any): void;
    setPointBudget(value: any): void;
    getPointBudget(): any;
    setShowAnnotations(value: any): void;
    getShowAnnotations(): boolean;
    setDEMCollisionsEnabled(value: any): void;
    getDEMCollisionsEnabled(): boolean;
    setEDLEnabled(value: any): void;
    getEDLEnabled(): boolean;
    setEDLRadius(value: any): void;
    getEDLRadius(): number;
    setEDLStrength(value: any): void;
    getEDLStrength(): number;
    setEDLOpacity(value: any): void;
    getEDLOpacity(): number;
    setFOV(value: any): void;
    getFOV(): number;
    disableAnnotations(): void;
    enableAnnotations(): void;
    setClassifications(classifications: any): void;
    setClassificationVisibility(key: any, value: any): void;
    toggleAllClassificationsVisibility(): void;
    setFilterReturnNumberRange(from: any, to: any): void;
    setFilterNumberOfReturnsRange(from: any, to: any): void;
    setFilterGPSTimeRange(from: any, to: any): void;
    setFilterPointSourceIDRange(from: any, to: any): void;
    setLengthUnit(value: any): void;
    setLengthUnitAndDisplayUnit(lengthUnitValue: any, lengthUnitDisplayValue: any): void;
    zoomTo(node: any, factor: any, animationDuration?: number): void;
    moveToGpsTimeVicinity(time: any): void;
    showAbout(): void;
    getBoundingBox(pointclouds: any): any;
    getGpsTimeExtent(): number[];
    fitToScreen(factor?: number, animationDuration?: number): void;
    toggleNavigationCube(): void;
    setView(view: any): void;
    setTopView(): void;
    setBottomView(): void;
    setFrontView(): void;
    setBackView(): void;
    setLeftView(): void;
    setRightView(): void;
    flipYZ(): void;
    setCameraMode(mode: any): void;
    getProjection(): any;
    loadProject(url: any): Promise<void>;
    saveProject(): any;
    loadSettingsFromURL(): void;
    createControls(): void;
    fpControls: FirstPersonControls;
    orbitControls: OrbitControls;
    earthControls: EarthControls;
    deviceControls: DeviceOrientationControls;
    vrControls: VRControls;
    toggleSidebar(): void;
    toggleMap(): void;
    onGUILoaded(callback: any): void;
    promiseGuiLoaded(): Promise<any>;
    mapView: MapView;
    sidebar: Sidebar;
    profileWindow: ProfileWindow;
    profileWindowController: ProfileWindowController;
    setLanguage(lang: any): void;
    setServer(server: any): void;
    initDragAndDrop(): void;
    initThree(): void;
    updateAnnotations(): void;
    visibleAnnotations: any[] | Set<any>;
    updateMaterialDefaults(pointcloud: any): void;
    update(delta: any, timestamp: any): void;
    _previousCamera: any;
    getPRenderer(): PotreeRenderer | EDLRenderer | HQSplatRenderer;
    hqRenderer: HQSplatRenderer;
    renderVR(): void;
    renderDefault(): void;
    render(): void;
    resolveTimings(timestamp: any): void;
    toggle: any;
    loop(timestamp: any): void;
    postError(content: any, params?: {}): Message;
    postMessage(content: any, params?: {}): Message;
}
import { EventDispatcher } from "../EventDispatcher.js";
import { PotreeRenderer } from "./PotreeRenderer.js";
import { EDLRenderer } from "./EDLRenderer.js";
import * as THREE from "../../libs/three.js/build/three.module.js";
import { Renderer } from "../PotreeRenderer.js";
import { InputHandler } from "../navigation/InputHandler.js";
import { ClippingTool } from "../utils/ClippingTool.js";
import { TransformationTool } from "../utils/TransformationTool.js";
import { NavigationCube } from "./NavigationCube.js";
import { Compass } from "../utils/Compass.js";
import { AnnotationTool } from "../utils/AnnotationTool.js";
import { MeasuringTool } from "../utils/MeasuringTool.js";
import { ProfileTool } from "../utils/ProfileTool.js";
import { VolumeTool } from "../utils/VolumeTool.js";
import { FirstPersonControls } from "../navigation/FirstPersonControls.js";
import { OrbitControls } from "../navigation/OrbitControls.js";
import { EarthControls } from "../navigation/EarthControls.js";
import { DeviceOrientationControls } from "../navigation/DeviceOrientationControls.js";
import { VRControls } from "../navigation/VRControls.js";
import { MapView } from "./map.js";
import { Sidebar } from "./sidebar.js";
import { ProfileWindow } from "./profile.js";
import { ProfileWindowController } from "./profile.js";
import { HQSplatRenderer } from "./HQSplatRenderer.js";
import { Message } from "../utils/Message.js";
