export class ProfileWindow extends EventDispatcher {
    constructor(viewer: any);
    viewer: any;
    elRoot: any;
    renderArea: any;
    svg: any;
    mouseIsDown: boolean;
    projectedBox: THREE.Box3;
    pointclouds: Map<any, any>;
    numPoints: number;
    lastAddPointsTimestamp: any;
    mouse: THREE.Vector2;
    scale: THREE.Vector3;
    autoFitEnabled: boolean;
    autoFit: boolean;
    pRenderer: Renderer;
    initListeners(): void;
    lastDrag: number;
    selectedPoint: any;
    selectPoint(mileage: any, elevation: any, radius: any): {
        distance: number;
        pointcloud: any;
        points: any;
        index: any;
    };
    initTHREE(): void;
    renderer: THREE.WebGLRenderer;
    camera: THREE.OrthographicCamera;
    scene: THREE.Scene;
    profileScene: THREE.Scene;
    pickSphere: THREE.Mesh;
    viewerPickSphere: THREE.Mesh;
    initSVG(): void;
    scaleX: any;
    scaleY: any;
    xAxis: any;
    yAxis: any;
    elXAxis: any;
    elYAxis: any;
    addPoints(pointcloud: any, points: any): void;
    reset(): void;
    lastReset: number;
    show(): void;
    enabled: boolean;
    hide(): void;
    updateScales(): void;
    requestScaleUpdate(): void;
    lastScaleUpdate: number;
    scaleUpdatePending: boolean;
    render(): void;
}
export class ProfileWindowController {
    constructor(viewer: any);
    viewer: any;
    profileWindow: any;
    profile: any;
    numPoints: number;
    threshold: number;
    rotateAmount: number;
    scheduledRecomputeTime: number;
    enabled: boolean;
    requests: any[];
    _recompute: () => void;
    setProfile(profile: any): void;
    reset(): void;
    progressHandler(pointcloud: any, progress: any): void;
    cancel(): void;
    finishLevelThenCancel(): void;
    recompute(): void;
}
import { EventDispatcher } from "../EventDispatcher.js";
import * as THREE from "../../libs/three.js/build/three.module.js";
import { Renderer } from "../PotreeRenderer.js";
